basePath: /
definitions:
  models.Failed:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.ProfileResponse:
    properties:
      bio:
        type: string
      email:
        type: string
      full_name:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  models.Tokens:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.UpdateProfileRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      full_name:
        type: string
      user_id:
        type: string
    required:
    - email
    - full_name
    type: object
  users.CheckRefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  users.RegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  users.RegisterResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  users.Token:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: API service
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user with username and password
      parameters:
      - description: Login details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Failed'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Failed'
      security:
      - ApiKeyAuth: []
      summary: Login a user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username and password and email
      parameters:
      - description: Registration details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/users.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users.RegisterResponse'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal status error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Register a new user
      tags:
      - Auth
  /user/profile/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieve user profile details
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Failed'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Failed'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - User
  /user/profileUpdate/{user_id}:
    put:
      consumes:
      - application/json
      description: Update user profile details
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Update details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Failed'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Failed'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Failed'
      security:
      - ApiKeyAuth: []
      summary: Update user profile
      tags:
      - User
  /user/refresh:
    post:
      description: it changes your access token
      parameters:
      - description: token
        in: body
        name: userinfo
        required: true
        schema:
          $ref: '#/definitions/users.CheckRefreshTokenRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.Token'
        "400":
          description: Invalid date
          schema:
            type: string
        "401":
          description: Invalid token
          schema:
            type: string
        "500":
          description: error while reading from server
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Refresh token
      tags:
      - auth
  /user/users/{user_id}:
    delete:
      description: you can delete your profile
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid data
          schema:
            type: string
        "500":
          description: error while reading from server
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: delete user
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
